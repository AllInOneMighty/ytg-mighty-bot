# For development only: copy this file in src/main/resources-filtered and set the values

# Create a project on https://console.developers.google.com/apis/dashboard
# and copy/paste the project id below.
projectId = 
# Then create an API key on https://console.developers.google.com/apis/credentials
# and copy/paste it below.
apiKey = 
# Your YouTube channel id. For example, if your channel is:
#   https://gaming.youtube.com/channel/<your_channel>
# ...your ID is: <your_channel>
channelId = 

#############
# IMPORTANT #
#############
# On Windows, paths should use two antislashes 
# e.g. C:\\Users\\...

# Writes a text file on your computer with the subscribers count
# of the channel specified above.
subCount.enabled = false
# Format to use when writing the number of subscribers. Use '{subs}'
# where you want the subscribers count. You can update the format
# file while streaming (to update a sub goal for example).
# Example: "Sub Goal: {subs}/1000"
subCount.formatInputFile = 
# Where to write the subscribers count using the format above.
subCount.outputFile = 
# Number of seconds to wait before refreshing the number of
# subscribers.
subCount.interval = 5

# Writes the current time to a file.
currentTime.enabled = false
# Where to write the time.
# Format will be: "12:34 PM"
currentTime.outputFile = 

# Announces new subscribers on chat.
newSubChatAnnouncer.enabled = false
# Ignores persistent broadcasts, i.e.:
#   https://gaming.youtube.com/channel/<your_channel>/live
newSubChatAnnouncer.ignorePersistentBroadcasts = false
# Number of seconds to wait before checking if their are
# new subs to announce.
newSubChatAnnouncer.interval = 10
# Messages to use when announcing new subs. One will be
# chosen at random. You can use as many messages as you
# want by creating a new line and increasing the last number
# by one. Each message must have one and only one '{name}'
# where the name of the new subscriber will be printed.
newSubChatAnnouncer.message1 = {name} has just subscribed!
newSubChatAnnouncer.message2 = 
newSubChatAnnouncer.message3 = 
newSubChatAnnouncer.message4 = 

# Writes the concurrent viewers and likes of live broadcasts to separate files.
# This module can process both persistent and non-persistent (also known
# as scheduled events) broadcasts. In each case, it will retrieve the data of the
# first broadcast of that type returned by the API, even if there are more than
# one active.
concurrentViewersAndLikes.enabled = false
# Number of seconds to wait before refreshing the concurrent
# viewers and the likes count of all broadcast types.
concurrentViewersAndLikes.interval = 5
# Ignores persistent broadcasts, i.e.:
#   https://gaming.youtube.com/channel/<your_channel>/live
concurrentViewersAndLikes.ignorePersistentBroadcasts = false
# File where to write the concurrent viewers count of the first persistent
# broadcast of the channel (as returned by the API). Not required if
# ignorePersistentBroadcasts is false.
concurrentViewersAndLikes.persistent.concurrentViewers.outputFile =
# File where to write the likes count of the first persistent broadcast of
# the channel (as returned by the API). Not required if
# ignorePersistentBroadcasts is false.
concurrentViewersAndLikes.persistent.likes.outputFile = 
# File where to write the concurrent viewers count of the first non persistent
# broadcast (also known as scheduled event) of the channel (as returned by the
# API).
concurrentViewersAndLikes.nonPersistent.concurrentViewers.outputFile =
# File where to write the likes count of the first non persistent  broadcast
# (also known as scheduled event) of the channel (as returned by the API).
concurrentViewersAndLikes.nonPersistent.likes.outputFile = 

# Writes the title of the most recent live broadcast to a file.
# This only writes the title of your most recent broadcast, whether
# it is a permanent or a non permanent broadcast.
currentLiveBroadcastTitle.enabled = false
# Number of seconds to wait before refreshing the current live
# broadcast title.
currentLiveBroadcastTitle.interval = 15
# File where to write the current live broadcast title.
currentLiveBroadcastTitle.currentLiveBroadcastTitle.outputFile = 