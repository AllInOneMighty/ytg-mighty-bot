# For development only: copy this file in src/main/resources-filtered and set the values

# Create a project on https://console.developers.google.com/apis/dashboard
# and copy/paste the project id below.
projectId = 
# Then create an API key on https://console.developers.google.com/apis/credentials
# and copy/paste it below.
apiKey = 
# Your YouTube channel id. For example, if your channel is:
#   https://www.youtube.com/channel/<channel_id>
# ...your ID is: <channel_id>
channelId = 
# Should persistent broadcasts be ignored entirely? Set to true if you only use scheduled events.
# Set to false if you use the "Stream now" feature (www.youtube.com/live_dashboard) on YouTube.
# Persistent broadcasts can only be accessed by your followers at the following URL:
#   https://www.youtube.com/channel/<channel_id>/live
ignorePersistentBroadcasts = true

#############
# IMPORTANT #
#############
# On Windows, paths should use two antislashes 
# e.g. C:\\Users\\...

# Writes a text file on your computer with the subscribers count
# of the channel specified above.
subCount.enabled = false
# Format to use when writing the number of subscribers. Use '{subs}'
# where you want the subscribers count. You can update the format
# file while streaming (to update a sub goal for example).
# Example: "Sub Goal: {subs}/1000"
subCount.formatInputFile = 
# Where to write the subscribers count using the format above.
subCount.outputFile = 
# Number of seconds to wait before refreshing the number of
# subscribers.
subCount.interval = 5

# Writes the current time to a file.
currentTime.enabled = false
# Where to write the time.
# Format will be: "12:34 PM"
currentTime.outputFile = 

# Announces new subscribers on all active broadcasts chat.
newSubChatAnnouncer.enabled = false
# Number of seconds to wait before checking if their are
# new subs to announce.
newSubChatAnnouncer.interval = 10
# Messages to use when announcing new subs. One will be
# chosen at random. You can use as many messages as you
# want by creating a new line and increasing the last number
# by one. Each message must have one and only one '{name}'
# where the name of the new subscriber will be printed.
newSubChatAnnouncer.message1 = {name} has just subscribed!
newSubChatAnnouncer.message2 = 
newSubChatAnnouncer.message3 = 
newSubChatAnnouncer.message4 = 

# Writes the concurrent viewers and likes of the most recent broadcast started
# on the channel to separate files, even if there are more than one broadcast
# active. Automatically updates the data if a new broadcast is started on the
# channel.
mostRecentLiveBroadcastConcurrentViewersAndLikes.enabled = true
# Number of seconds to wait before refreshing the concurrent
# viewers and the likes count of all broadcast types.
mostRecentLiveBroadcastConcurrentViewersAndLikes.interval = 5
# File where to write the concurrent viewers count of the most recent broadcast
# started on the channel (as returned by the API).
mostRecentLiveBroadcastConcurrentViewersAndLikes.concurrentViewers.outputFile =
# File where to write the likes count of the most recent broadcast started on
# the channel (as returned by the API).
mostRecentLiveBroadcastConcurrentViewersAndLikes.likes.outputFile = 

# Writes the title of the most recent live broadcast to a file.
mostRecentLiveBroadcastTitle.enabled = false
# Number of seconds to wait before refreshing the most recent
# live broadcast title.
mostRecentLiveBroadcastTitle.interval = 15
# File where to write the most recent live broadcast title.
mostRecentLiveBroadcastTitle.currentLiveBroadcastTitle.outputFile = 